{"_path":"/docs","_dir":"","_draft":false,"_partial":false,"_locale":"","title":"Installation","description":"","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"installation"},"children":[{"type":"text","value":"Installation"}]},{"type":"element","tag":"h2","props":{"id":"requirements"},"children":[{"type":"text","value":"Requirements"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Depending on your project targets, you need at least :"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Android : API level 21 (Android 5.0), which corresponds to minimum Android version supported by Flutter.\nNote that attributes don't work on Android 6.0 and below\n(see "},{"type":"element","tag":"a","props":{"href":"https://issuetracker.google.com/issues/37020436","rel":["nofollow"]},"children":[{"type":"text","value":"this ticket"}]},{"type":"text","value":" for more details)."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"iOS : 13.0, because Bonsoir rely on "},{"type":"element","tag":"code","props":{"className":""},"children":[{"type":"text","value":"NWBrowser"}]},{"type":"text","value":"."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"macOS : 10.15 (El Capitan), for the same reason as above."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Windows : Win 10 (19H1/1903) (Mai 2019 Update).\nThe "},{"type":"element","tag":"a","props":{"href":"https://msdn.microsoft.com/en-us/library/windows.networking.servicediscovery.dnssd.aspx","rel":["nofollow"]},"children":[{"type":"text","value":"WIN32 DNS-SD API"}]},{"type":"text","value":"\nhas been exposed from, at least, that version."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Linux : requires "},{"type":"element","tag":"a","props":{"href":"https://www.avahi.org/","rel":["nofollow"]},"children":[{"type":"text","value":"Avahi daemon"}]},{"type":"text","value":", because Bonsoir uses its D-Bus interface\nfor browsing and registering mDNS/DNS-SD services."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This plugin "},{"type":"element","tag":"a","props":{"href":"https://stackoverflow.com/a/46926325/3608831","rel":["nofollow"]},"children":[{"type":"text","value":"cannot be tested on an Android emulator"}]},{"type":"text","value":"\n(well it can, but the only services that you are able to discover are the ones broadcasted by your emulator)."}]},{"type":"element","tag":"h2","props":{"id":"depend-on-it"},"children":[{"type":"text","value":"Depend on it"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In your Flutter project directory, run the following commands :"}]},{"type":"element","tag":"pre","props":{"className":["language-shell"],"code":"flutter pub add bonsoir\nflutter pub get\n","language":"shell","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"flutter pub add bonsoir\nflutter pub get\n"}]}]},{"type":"element","tag":"h2","props":{"id":"additional-instructions"},"children":[{"type":"text","value":"Additional instructions"}]},{"type":"element","tag":"h3","props":{"id":"ios"},"children":[{"type":"text","value":"iOS"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If you want to use this plugin on iOS, you must update your deployment target to "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"at least"}]},{"type":"text","value":" 13.0.\nAt the top of "},{"type":"element","tag":"code","props":{"className":""},"children":[{"type":"text","value":"ios/Podfile"}]},{"type":"text","value":", add the following :"}]},{"type":"element","tag":"pre","props":{"className":["language-shell"],"code":"platform :ios, '13.0'\n","filename":"ios/Podfile","language":"shell","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"platform :ios, '13.0'\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Also, open your iOS project in Xcode and select Runner, Targets -> Runner and then the \"General\" tab.\nUnder the \"Minimum Deployments\" section, update the iOS version to 13.0 or higher."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If you're building your app for iOS 14 or higher, you have to edit your "},{"type":"element","tag":"code","props":{"className":""},"children":[{"type":"text","value":"Info.plist"}]},{"type":"text","value":" file. Just add\nthe following lines :"}]},{"type":"element","tag":"pre","props":{"className":["language-xml"],"code":"<key>NSLocalNetworkUsageDescription</key>\n<string>Describe here why you want to use Bonsoir.</string>\n<key>NSBonjourServices</key>\n<array>\n    <string>_first-service._tcp</string>\n    <string>_second-service._tcp</string>\n    <string>_third-service._tcp</string>\n    <!-- Add more here -->\n</array>\n","filename":"ios/Info.plist","language":"xml","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<key>NSLocalNetworkUsageDescription</key>\n<string>Describe here why you want to use Bonsoir.</string>\n<key>NSBonjourServices</key>\n<array>\n    <string>_first-service._tcp</string>\n    <string>_second-service._tcp</string>\n    <string>_third-service._tcp</string>\n    <!-- Add more here -->\n</array>\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Don't forget to edit them according to your needs."}]},{"type":"element","tag":"h3","props":{"id":"macos"},"children":[{"type":"text","value":"macOS"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If you want to use this plugin on macOS, you must update your deployment target to "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"at least"}]},{"type":"text","value":" 10.15.\nAt the top of "},{"type":"element","tag":"code","props":{"className":""},"children":[{"type":"text","value":"macos/Podfile"}]},{"type":"text","value":", add the following :"}]},{"type":"element","tag":"pre","props":{"className":["language-shell"],"code":"platform :ios, '10.15'\n","filename":"macos/Podfile","language":"shell","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"platform :ios, '10.15'\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Also, open your macOS project in Xcode and select Runner, Targets -> Runner and then the \"General\" tab.\nUnder the \"Minimum Deployments\" section, update the macOS version to 10.15 or higher."}]},{"type":"element","tag":"h3","props":{"id":"linux"},"children":[{"type":"text","value":"Linux"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If you don't have Avahi installed on your system, just install it using :"}]},{"type":"element","tag":"pre","props":{"className":["language-shell"],"code":"sudo apt install -y avahi-daemon avahi-discover avahi-utils libnss-mdns mdns-scan\n","language":"shell","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"sudo apt install -y avahi-daemon avahi-discover avahi-utils libnss-mdns mdns-scan\n"}]}]},{"type":"element","tag":"h1","props":{"id":"getting-started"},"children":[{"type":"text","value":"Getting started"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Bonsoir has been made to be as easy to use as possible."}]},{"type":"element","tag":"h2","props":{"id":"broadcast-a-service"},"children":[{"type":"text","value":"Broadcast a service"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Here is how you can broadcast your service using "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"Bonsoir"}]},{"type":"text","value":" :"}]},{"type":"element","tag":"pre","props":{"className":["language-dart"],"code":"// Let's create our service !\nBonsoirService service = BonsoirService(\n  name: 'My wonderful service', // Put your service name here.\n  type: '_wonderful-service._tcp', // Put your service type here. Syntax : _ServiceType._TransportProtocolName. (see http://wiki.ros.org/zeroconf/Tutorials/Understanding%20Zeroconf%20Service%20Types).\n  port: 3030, // Put your service port here.\n);\n\n// And now we can broadcast it :\nBonsoirBroadcast broadcast = BonsoirBroadcast(service: service);\nawait broadcast.ready;\nawait broadcast.start();\n\n// ...\n\n// Then if you want to stop the broadcast :\nawait broadcast.stop();\n","language":"dart","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// Let's create our service !\nBonsoirService service = BonsoirService(\n  name: 'My wonderful service', // Put your service name here.\n  type: '_wonderful-service._tcp', // Put your service type here. Syntax : _ServiceType._TransportProtocolName. (see http://wiki.ros.org/zeroconf/Tutorials/Understanding%20Zeroconf%20Service%20Types).\n  port: 3030, // Put your service port here.\n);\n\n// And now we can broadcast it :\nBonsoirBroadcast broadcast = BonsoirBroadcast(service: service);\nawait broadcast.ready;\nawait broadcast.start();\n\n// ...\n\n// Then if you want to stop the broadcast :\nawait broadcast.stop();\n"}]}]},{"type":"element","tag":"h2","props":{"id":"discover-services"},"children":[{"type":"text","value":"Discover services"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Here is how you can search for a broadcasted service :"}]},{"type":"element","tag":"pre","props":{"className":["language-dart"],"code":"// This is the type of service we're looking for :\nString type = '_wonderful-service._tcp';\n\n// Once defined, we can start the discovery :\nBonsoirDiscovery discovery = BonsoirDiscovery(type: type);\nawait discovery.ready;\n\n// If you want to listen to the discovery :\ndiscovery.eventStream!.listen((event) { // `eventStream` is not null as the discovery instance is \"ready\" !\n  if (event.type == BonsoirDiscoveryEventType.discoveryServiceFound) {\n    print('Service found : ${event.service.toJson()}')\n    event.service!.resolve(discovery.serviceResolver); // Should be called when the user wants to connect to this service.\n  } else if (event.type == BonsoirDiscoveryEventType.discoveryServiceResolved) {\n    print('Service resolved : ${event.service.toJson()}')\n  } else if (event.type == BonsoirDiscoveryEventType.discoveryServiceLost) {\n    print('Service lost : ${event.service.toJson()}')\n  }\n});\n\n// Start the discovery **after** listening to discovery events :\nawait discovery.start();\n\n// Then if you want to stop the discovery :\nawait discovery.stop();\n","language":"dart","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// This is the type of service we're looking for :\nString type = '_wonderful-service._tcp';\n\n// Once defined, we can start the discovery :\nBonsoirDiscovery discovery = BonsoirDiscovery(type: type);\nawait discovery.ready;\n\n// If you want to listen to the discovery :\ndiscovery.eventStream!.listen((event) { // `eventStream` is not null as the discovery instance is \"ready\" !\n  if (event.type == BonsoirDiscoveryEventType.discoveryServiceFound) {\n    print('Service found : ${event.service.toJson()}')\n    event.service!.resolve(discovery.serviceResolver); // Should be called when the user wants to connect to this service.\n  } else if (event.type == BonsoirDiscoveryEventType.discoveryServiceResolved) {\n    print('Service resolved : ${event.service.toJson()}')\n  } else if (event.type == BonsoirDiscoveryEventType.discoveryServiceLost) {\n    print('Service lost : ${event.service.toJson()}')\n  }\n});\n\n// Start the discovery **after** listening to discovery events :\nawait discovery.start();\n\n// Then if you want to stop the discovery :\nawait discovery.stop();\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Note."}]},{"type":"text","value":" If you're transitioning from "},{"type":"element","tag":"code","props":{"className":""},"children":[{"type":"text","value":"multicast_dns"}]},{"type":"text","value":", note that types don't end with "},{"type":"element","tag":"q","props":{},"children":[{"type":"text","value":".local"}]},{"type":"text","value":"."}]},{"type":"element","tag":"h1","props":{"id":"in-depth-example"},"children":[{"type":"text","value":"In-depth example"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If you want a "},{"type":"element","tag":"q","props":{},"children":[{"type":"text","value":"full"}]},{"type":"text","value":" example, don't hesitate to check\n"},{"type":"element","tag":"a","props":{"href":"https://github.com/Skyost/Bonsoir/tree/master/packages/bonsoir/example","rel":["nofollow"]},"children":[{"type":"text","value":"this one"}]},{"type":"text","value":" on Github."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To run it :"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://melos.invertase.dev/~melos-latest/getting-started#installation","rel":["nofollow"]},"children":[{"type":"text","value":"Install Melos"}]},{"type":"text","value":"."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/Skyost/Bonsoir/archive/refs/heads/master.zip","rel":["nofollow"]},"children":[{"type":"text","value":"Clone the repository"}]},{"type":"text","value":"."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Run "},{"type":"element","tag":"code","props":{"className":""},"children":[{"type":"text","value":"melos bs"}]},{"type":"text","value":"."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Go to the "},{"type":"element","tag":"code","props":{"className":""},"children":[{"type":"text","value":"packages/bonsoir/example"}]},{"type":"text","value":" directory, and run "},{"type":"element","tag":"code","props":{"className":""},"children":[{"type":"text","value":"flutter run"}]},{"type":"text","value":"."}]}]},{"type":"element","tag":"h1","props":{"id":"contribute"},"children":[{"type":"text","value":"Contribute"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You have a lot of options to contribute to this project ! You can :"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/Skyost/Bonsoir/fork","rel":["nofollow"]},"children":[{"type":"text","value":"Fork it"}]},{"type":"text","value":" on Github to submit your pull requests."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/Skyost/Bonsoir/issues/new/choose","rel":["nofollow"]},"children":[{"type":"text","value":"Submit"}]},{"type":"text","value":" a feature request or a bug report."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://paypal.me/Skyost","rel":["nofollow"]},"children":[{"type":"text","value":"Donate"}]},{"type":"text","value":" to the developer."}]}]},{"type":"element","tag":"h1","props":{"id":"about"},"children":[{"type":"text","value":"About"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This plugin was initially created to use in my game, "},{"type":"element","tag":"a","props":{"href":"https://werewolf.skyost.eu","rel":["nofollow"]},"children":[{"type":"text","value":"Mobile Werewolf"}]},{"type":"text","value":".\nIt is an unofficial mobile version of the famous board game Mafia / Werewolves.\nIn this game, players can play against each others via Wi-Fi, so Bonsoir allows them to easily broadcast,\ndiscover and join local network parties."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The hand icon has been created by "},{"type":"element","tag":"a","props":{"href":"https://www.flaticon.com/authors/vitaly-gorbachev","rel":["nofollow"]},"children":[{"type":"text","value":"Vitaly Gorbachev"}]},{"type":"text","value":"."}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"requirements","depth":2,"text":"Requirements"},{"id":"depend-on-it","depth":2,"text":"Depend on it"},{"id":"additional-instructions","depth":2,"text":"Additional instructions","children":[{"id":"ios","depth":3,"text":"iOS"},{"id":"macos","depth":3,"text":"macOS"},{"id":"linux","depth":3,"text":"Linux"}]},{"id":"broadcast-a-service","depth":2,"text":"Broadcast a service"},{"id":"discover-services","depth":2,"text":"Discover services"}]}},"_type":"markdown","_id":"content:docs.md","_source":"content","_file":"docs.md","_extension":"md"}